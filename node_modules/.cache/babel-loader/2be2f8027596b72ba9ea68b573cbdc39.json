{"ast":null,"code":"import React from 'react';\nimport { isDayOrMoment, useTranslationContext } from '../../context/TranslationContext';\nvar UnMemoizedDateSeparator = function (props) {\n  var date = props.date,\n    formatDate = props.formatDate,\n    _a = props.position,\n    position = _a === void 0 ? 'right' : _a,\n    unread = props.unread;\n  var _b = useTranslationContext('DateSeparator'),\n    t = _b.t,\n    tDateTimeParser = _b.tDateTimeParser;\n  if (typeof date === 'string') return null;\n  var parsedDate = tDateTimeParser(date.toISOString());\n  var formattedDate = formatDate ? formatDate(date) : isDayOrMoment(parsedDate) ? parsedDate.calendar() : parsedDate;\n  return React.createElement(\"div\", {\n    className: 'str-chat__date-separator'\n  }, (position === 'right' || position === 'center') && React.createElement(\"hr\", {\n    className: 'str-chat__date-separator-line'\n  }), React.createElement(\"div\", {\n    className: 'str-chat__date-separator-date'\n  }, unread ? t('New') + \" - \" + formattedDate : formattedDate), (position === 'left' || position === 'center') && React.createElement(\"hr\", {\n    className: 'str-chat__date-separator-line'\n  }));\n};\n/**\n * A simple date separator between messages.\n */\nexport var DateSeparator = React.memo(UnMemoizedDateSeparator);","map":{"version":3,"names":["React","isDayOrMoment","useTranslationContext","UnMemoizedDateSeparator","props","date","formatDate","_a","position","unread","_b","t","tDateTimeParser","parsedDate","toISOString","formattedDate","calendar","createElement","className","DateSeparator","memo"],"sources":["C:/Users/HP/Desktop/project_medical_pager_chat-master/node_modules/stream-chat-react/dist/components/DateSeparator/DateSeparator.js"],"sourcesContent":["import React from 'react';\nimport { isDayOrMoment, useTranslationContext } from '../../context/TranslationContext';\nvar UnMemoizedDateSeparator = function (props) {\n    var date = props.date, formatDate = props.formatDate, _a = props.position, position = _a === void 0 ? 'right' : _a, unread = props.unread;\n    var _b = useTranslationContext('DateSeparator'), t = _b.t, tDateTimeParser = _b.tDateTimeParser;\n    if (typeof date === 'string')\n        return null;\n    var parsedDate = tDateTimeParser(date.toISOString());\n    var formattedDate = formatDate\n        ? formatDate(date)\n        : isDayOrMoment(parsedDate)\n            ? parsedDate.calendar()\n            : parsedDate;\n    return (React.createElement(\"div\", { className: 'str-chat__date-separator' },\n        (position === 'right' || position === 'center') && (React.createElement(\"hr\", { className: 'str-chat__date-separator-line' })),\n        React.createElement(\"div\", { className: 'str-chat__date-separator-date' }, unread ? t('New') + \" - \" + formattedDate : formattedDate),\n        (position === 'left' || position === 'center') && (React.createElement(\"hr\", { className: 'str-chat__date-separator-line' }))));\n};\n/**\n * A simple date separator between messages.\n */\nexport var DateSeparator = React.memo(UnMemoizedDateSeparator);\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,qBAAqB,QAAQ,kCAAkC;AACvF,IAAIC,uBAAuB,GAAG,SAAAA,CAAUC,KAAK,EAAE;EAC3C,IAAIC,IAAI,GAAGD,KAAK,CAACC,IAAI;IAAEC,UAAU,GAAGF,KAAK,CAACE,UAAU;IAAEC,EAAE,GAAGH,KAAK,CAACI,QAAQ;IAAEA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,OAAO,GAAGA,EAAE;IAAEE,MAAM,GAAGL,KAAK,CAACK,MAAM;EACzI,IAAIC,EAAE,GAAGR,qBAAqB,CAAC,eAAe,CAAC;IAAES,CAAC,GAAGD,EAAE,CAACC,CAAC;IAAEC,eAAe,GAAGF,EAAE,CAACE,eAAe;EAC/F,IAAI,OAAOP,IAAI,KAAK,QAAQ,EACxB,OAAO,IAAI;EACf,IAAIQ,UAAU,GAAGD,eAAe,CAACP,IAAI,CAACS,WAAW,CAAC,CAAC,CAAC;EACpD,IAAIC,aAAa,GAAGT,UAAU,GACxBA,UAAU,CAACD,IAAI,CAAC,GAChBJ,aAAa,CAACY,UAAU,CAAC,GACrBA,UAAU,CAACG,QAAQ,CAAC,CAAC,GACrBH,UAAU;EACpB,OAAQb,KAAK,CAACiB,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAA2B,CAAC,EACxE,CAACV,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,QAAQ,KAAMR,KAAK,CAACiB,aAAa,CAAC,IAAI,EAAE;IAAEC,SAAS,EAAE;EAAgC,CAAC,CAAE,EAC9HlB,KAAK,CAACiB,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAAgC,CAAC,EAAET,MAAM,GAAGE,CAAC,CAAC,KAAK,CAAC,GAAG,KAAK,GAAGI,aAAa,GAAGA,aAAa,CAAC,EACrI,CAACP,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,QAAQ,KAAMR,KAAK,CAACiB,aAAa,CAAC,IAAI,EAAE;IAAEC,SAAS,EAAE;EAAgC,CAAC,CAAE,CAAC;AACtI,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIC,aAAa,GAAGnB,KAAK,CAACoB,IAAI,CAACjB,uBAAuB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}