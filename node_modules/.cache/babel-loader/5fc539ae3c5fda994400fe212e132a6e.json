{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nexport function useNewMessageNotification(messages, currentUserId) {\n  var _a = useState(false),\n    newMessagesNotification = _a[0],\n    setNewMessagesNotification = _a[1];\n  /**\n   * use the flag to avoid the initial \"new messages\" quick blink\n   */\n  var didMount = useRef(false);\n  var lastMessageId = useRef('');\n  var atBottom = useRef(false);\n  useEffect(function () {\n    var _a;\n    /* handle scrolling behavior for new messages */\n    if (!(messages === null || messages === void 0 ? void 0 : messages.length)) return;\n    var lastMessage = messages[messages.length - 1];\n    var prevMessageId = lastMessageId.current;\n    lastMessageId.current = lastMessage.id || ''; // update last message id\n    /* do nothing if new messages are loaded from top(loadMore)  */\n    if (lastMessage.id === prevMessageId) return;\n    /* if list is already at the bottom return, followOutput will do the job */\n    if (atBottom.current) return;\n    /* if the new message belongs to current user scroll to bottom */\n    if (((_a = lastMessage.user) === null || _a === void 0 ? void 0 : _a.id) !== currentUserId && didMount.current) {\n      /* otherwise just show newMessage notification  */\n      setNewMessagesNotification(true);\n    }\n    didMount.current = true;\n  }, [currentUserId, messages]);\n  return {\n    atBottom: atBottom,\n    newMessagesNotification: newMessagesNotification,\n    setNewMessagesNotification: setNewMessagesNotification\n  };\n}","map":{"version":3,"names":["useEffect","useRef","useState","useNewMessageNotification","messages","currentUserId","_a","newMessagesNotification","setNewMessagesNotification","didMount","lastMessageId","atBottom","length","lastMessage","prevMessageId","current","id","user"],"sources":["C:/Users/HP/Desktop/project_medical_pager_chat-master/node_modules/stream-chat-react/dist/components/MessageList/hooks/useNewMessageNotification.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nexport function useNewMessageNotification(messages, currentUserId) {\n    var _a = useState(false), newMessagesNotification = _a[0], setNewMessagesNotification = _a[1];\n    /**\n     * use the flag to avoid the initial \"new messages\" quick blink\n     */\n    var didMount = useRef(false);\n    var lastMessageId = useRef('');\n    var atBottom = useRef(false);\n    useEffect(function () {\n        var _a;\n        /* handle scrolling behavior for new messages */\n        if (!(messages === null || messages === void 0 ? void 0 : messages.length))\n            return;\n        var lastMessage = messages[messages.length - 1];\n        var prevMessageId = lastMessageId.current;\n        lastMessageId.current = lastMessage.id || ''; // update last message id\n        /* do nothing if new messages are loaded from top(loadMore)  */\n        if (lastMessage.id === prevMessageId)\n            return;\n        /* if list is already at the bottom return, followOutput will do the job */\n        if (atBottom.current)\n            return;\n        /* if the new message belongs to current user scroll to bottom */\n        if (((_a = lastMessage.user) === null || _a === void 0 ? void 0 : _a.id) !== currentUserId && didMount.current) {\n            /* otherwise just show newMessage notification  */\n            setNewMessagesNotification(true);\n        }\n        didMount.current = true;\n    }, [currentUserId, messages]);\n    return { atBottom: atBottom, newMessagesNotification: newMessagesNotification, setNewMessagesNotification: setNewMessagesNotification };\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAO,SAASC,yBAAyBA,CAACC,QAAQ,EAAEC,aAAa,EAAE;EAC/D,IAAIC,EAAE,GAAGJ,QAAQ,CAAC,KAAK,CAAC;IAAEK,uBAAuB,GAAGD,EAAE,CAAC,CAAC,CAAC;IAAEE,0BAA0B,GAAGF,EAAE,CAAC,CAAC,CAAC;EAC7F;AACJ;AACA;EACI,IAAIG,QAAQ,GAAGR,MAAM,CAAC,KAAK,CAAC;EAC5B,IAAIS,aAAa,GAAGT,MAAM,CAAC,EAAE,CAAC;EAC9B,IAAIU,QAAQ,GAAGV,MAAM,CAAC,KAAK,CAAC;EAC5BD,SAAS,CAAC,YAAY;IAClB,IAAIM,EAAE;IACN;IACA,IAAI,EAAEF,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACQ,MAAM,CAAC,EACtE;IACJ,IAAIC,WAAW,GAAGT,QAAQ,CAACA,QAAQ,CAACQ,MAAM,GAAG,CAAC,CAAC;IAC/C,IAAIE,aAAa,GAAGJ,aAAa,CAACK,OAAO;IACzCL,aAAa,CAACK,OAAO,GAAGF,WAAW,CAACG,EAAE,IAAI,EAAE,CAAC,CAAC;IAC9C;IACA,IAAIH,WAAW,CAACG,EAAE,KAAKF,aAAa,EAChC;IACJ;IACA,IAAIH,QAAQ,CAACI,OAAO,EAChB;IACJ;IACA,IAAI,CAAC,CAACT,EAAE,GAAGO,WAAW,CAACI,IAAI,MAAM,IAAI,IAAIX,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACU,EAAE,MAAMX,aAAa,IAAII,QAAQ,CAACM,OAAO,EAAE;MAC5G;MACAP,0BAA0B,CAAC,IAAI,CAAC;IACpC;IACAC,QAAQ,CAACM,OAAO,GAAG,IAAI;EAC3B,CAAC,EAAE,CAACV,aAAa,EAAED,QAAQ,CAAC,CAAC;EAC7B,OAAO;IAAEO,QAAQ,EAAEA,QAAQ;IAAEJ,uBAAuB,EAAEA,uBAAuB;IAAEC,0BAA0B,EAAEA;EAA2B,CAAC;AAC3I","ignoreList":[]},"metadata":{},"sourceType":"module"}