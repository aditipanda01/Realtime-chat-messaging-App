{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport var CooldownTimer = function (props) {\n  var cooldownInterval = props.cooldownInterval,\n    setCooldownRemaining = props.setCooldownRemaining;\n  var _a = useState(cooldownInterval),\n    seconds = _a[0],\n    setSeconds = _a[1];\n  useEffect(function () {\n    var countdownInterval = setInterval(function () {\n      if (seconds > 0) {\n        setSeconds(seconds - 1);\n      } else {\n        setCooldownRemaining(0);\n      }\n    }, 1000);\n    return function () {\n      return clearInterval(countdownInterval);\n    };\n  });\n  return React.createElement(\"div\", null, seconds === 0 ? null : seconds);\n};\nvar rolesToSkip = {\n  admin: true,\n  channel_moderator: true,\n  moderator: true\n};\nvar checkUserRoles = function (globalRole, channelRole) {\n  var skipGlobal = !!rolesToSkip[globalRole];\n  var skipChannel = !!rolesToSkip[channelRole];\n  return skipGlobal || skipChannel;\n};\nexport var useCooldownTimer = function () {\n  var _a, _b;\n  var client = useChatContext('useCooldownTimer').client;\n  var channel = useChannelStateContext('useCooldownTimer').channel;\n  var cooldownInterval = (channel.data || {}).cooldown;\n  var _c = useState(),\n    cooldownRemaining = _c[0],\n    setCooldownRemaining = _c[1];\n  var globalRole = ((_a = client.user) === null || _a === void 0 ? void 0 : _a.role) || '';\n  var channelRole = ((_b = channel.state.members[client.userID || '']) === null || _b === void 0 ? void 0 : _b.role) || '';\n  var skipCooldown = checkUserRoles(globalRole, channelRole);\n  useEffect(function () {\n    var handleEvent = function (event) {\n      var _a;\n      if (!skipCooldown && ((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID) {\n        setCooldownRemaining(cooldownInterval);\n      }\n    };\n    if (cooldownInterval) channel.on('message.new', handleEvent);\n    return function () {\n      return channel.off('message.new', handleEvent);\n    };\n  }, [channel.id, cooldownInterval]);\n  return {\n    cooldownInterval: cooldownInterval || 0,\n    cooldownRemaining: cooldownRemaining,\n    setCooldownRemaining: setCooldownRemaining\n  };\n};","map":{"version":3,"names":["React","useEffect","useState","useChatContext","useChannelStateContext","CooldownTimer","props","cooldownInterval","setCooldownRemaining","_a","seconds","setSeconds","countdownInterval","setInterval","clearInterval","createElement","rolesToSkip","admin","channel_moderator","moderator","checkUserRoles","globalRole","channelRole","skipGlobal","skipChannel","useCooldownTimer","_b","client","channel","data","cooldown","_c","cooldownRemaining","user","role","state","members","userID","skipCooldown","handleEvent","event","id","on","off"],"sources":["C:/Users/HP/Desktop/project_medical_pager_chat-master/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCooldownTimer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport var CooldownTimer = function (props) {\n    var cooldownInterval = props.cooldownInterval, setCooldownRemaining = props.setCooldownRemaining;\n    var _a = useState(cooldownInterval), seconds = _a[0], setSeconds = _a[1];\n    useEffect(function () {\n        var countdownInterval = setInterval(function () {\n            if (seconds > 0) {\n                setSeconds(seconds - 1);\n            }\n            else {\n                setCooldownRemaining(0);\n            }\n        }, 1000);\n        return function () { return clearInterval(countdownInterval); };\n    });\n    return React.createElement(\"div\", null, seconds === 0 ? null : seconds);\n};\nvar rolesToSkip = {\n    admin: true,\n    channel_moderator: true,\n    moderator: true,\n};\nvar checkUserRoles = function (globalRole, channelRole) {\n    var skipGlobal = !!rolesToSkip[globalRole];\n    var skipChannel = !!rolesToSkip[channelRole];\n    return skipGlobal || skipChannel;\n};\nexport var useCooldownTimer = function () {\n    var _a, _b;\n    var client = useChatContext('useCooldownTimer').client;\n    var channel = useChannelStateContext('useCooldownTimer').channel;\n    var cooldownInterval = (channel.data || {}).cooldown;\n    var _c = useState(), cooldownRemaining = _c[0], setCooldownRemaining = _c[1];\n    var globalRole = ((_a = client.user) === null || _a === void 0 ? void 0 : _a.role) || '';\n    var channelRole = ((_b = channel.state.members[client.userID || '']) === null || _b === void 0 ? void 0 : _b.role) || '';\n    var skipCooldown = checkUserRoles(globalRole, channelRole);\n    useEffect(function () {\n        var handleEvent = function (event) {\n            var _a;\n            if (!skipCooldown && ((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID) {\n                setCooldownRemaining(cooldownInterval);\n            }\n        };\n        if (cooldownInterval)\n            channel.on('message.new', handleEvent);\n        return function () { return channel.off('message.new', handleEvent); };\n    }, [channel.id, cooldownInterval]);\n    return { cooldownInterval: cooldownInterval || 0, cooldownRemaining: cooldownRemaining, setCooldownRemaining: setCooldownRemaining };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}