{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nexport var channelReducer = function (state, action) {\n  var _a;\n  switch (action.type) {\n    case 'closeThread':\n      {\n        return __assign(__assign({}, state), {\n          thread: null,\n          threadLoadingMore: false,\n          threadMessages: []\n        });\n      }\n    case 'copyMessagesFromChannel':\n      {\n        var channel = action.channel,\n          parentId = action.parentId;\n        return __assign(__assign({}, state), {\n          messages: __spreadArray([], channel.state.messages),\n          pinnedMessages: __spreadArray([], channel.state.pinnedMessages),\n          threadMessages: parentId ? __assign({}, channel.state.threads)[parentId] || [] : state.threadMessages\n        });\n      }\n    case 'copyStateFromChannelOnEvent':\n      {\n        var channel = action.channel;\n        return __assign(__assign({}, state), {\n          members: __assign({}, channel.state.members),\n          messages: __spreadArray([], channel.state.messages),\n          pinnedMessages: __spreadArray([], channel.state.pinnedMessages),\n          read: __assign({}, channel.state.read),\n          watcherCount: channel.state.watcher_count,\n          watchers: __assign({}, channel.state.watchers)\n        });\n      }\n    case 'initStateFromChannel':\n      {\n        var channel = action.channel;\n        return __assign(__assign({}, state), {\n          loading: false,\n          members: __assign({}, channel.state.members),\n          messages: __spreadArray([], channel.state.messages),\n          pinnedMessages: __spreadArray([], channel.state.pinnedMessages),\n          read: __assign({}, channel.state.read),\n          watcherCount: channel.state.watcher_count,\n          watchers: __assign({}, channel.state.watchers)\n        });\n      }\n    case 'loadMoreFinished':\n      {\n        var hasMore = action.hasMore,\n          messages = action.messages;\n        return __assign(__assign({}, state), {\n          hasMore: hasMore,\n          loadingMore: false,\n          messages: messages\n        });\n      }\n    case 'loadMoreThreadFinished':\n      {\n        var threadHasMore = action.threadHasMore,\n          threadMessages = action.threadMessages;\n        return __assign(__assign({}, state), {\n          threadHasMore: threadHasMore,\n          threadLoadingMore: false,\n          threadMessages: threadMessages\n        });\n      }\n    case 'openThread':\n      {\n        var channel = action.channel,\n          message = action.message;\n        return __assign(__assign({}, state), {\n          thread: message,\n          threadMessages: message.id ? __assign({}, channel.state.threads)[message.id] || [] : []\n        });\n      }\n    case 'setError':\n      {\n        var error = action.error;\n        return __assign(__assign({}, state), {\n          error: error\n        });\n      }\n    case 'setLoadingMore':\n      {\n        var loadingMore = action.loadingMore;\n        return __assign(__assign({}, state), {\n          loadingMore: loadingMore\n        });\n      }\n    case 'setThread':\n      {\n        var message = action.message;\n        return __assign(__assign({}, state), {\n          thread: message\n        });\n      }\n    case 'setTyping':\n      {\n        var channel = action.channel;\n        return __assign(__assign({}, state), {\n          typing: __assign({}, channel.state.typing)\n        });\n      }\n    case 'startLoadingThread':\n      {\n        return __assign(__assign({}, state), {\n          threadLoadingMore: true\n        });\n      }\n    case 'updateThreadOnEvent':\n      {\n        var channel = action.channel,\n          message = action.message;\n        if (!state.thread) return state;\n        return __assign(__assign({}, state), {\n          thread: (message === null || message === void 0 ? void 0 : message.id) === state.thread.id ? channel.state.formatMessage(message) : state.thread,\n          threadMessages: ((_a = state.thread) === null || _a === void 0 ? void 0 : _a.id) ? __assign({}, channel.state.threads)[state.thread.id] || [] : []\n        });\n      }\n    default:\n      return state;\n  }\n};\nexport var initialState = {\n  error: null,\n  hasMore: true,\n  loading: true,\n  loadingMore: false,\n  members: {},\n  messages: [],\n  pinnedMessages: [],\n  read: {},\n  thread: null,\n  threadHasMore: true,\n  threadLoadingMore: false,\n  threadMessages: [],\n  typing: {},\n  watcherCount: 0,\n  watchers: {}\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__spreadArray","to","from","il","j","channelReducer","state","action","_a","type","thread","threadLoadingMore","threadMessages","channel","parentId","messages","pinnedMessages","threads","members","read","watcherCount","watcher_count","watchers","loading","hasMore","loadingMore","threadHasMore","message","id","error","typing","formatMessage","initialState"],"sources":["C:/Users/HP/Desktop/project_medical_pager_chat-master/node_modules/stream-chat-react/dist/components/Channel/channelState.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nexport var channelReducer = function (state, action) {\n    var _a;\n    switch (action.type) {\n        case 'closeThread': {\n            return __assign(__assign({}, state), { thread: null, threadLoadingMore: false, threadMessages: [] });\n        }\n        case 'copyMessagesFromChannel': {\n            var channel = action.channel, parentId = action.parentId;\n            return __assign(__assign({}, state), { messages: __spreadArray([], channel.state.messages), pinnedMessages: __spreadArray([], channel.state.pinnedMessages), threadMessages: parentId\n                    ? __assign({}, channel.state.threads)[parentId] || []\n                    : state.threadMessages });\n        }\n        case 'copyStateFromChannelOnEvent': {\n            var channel = action.channel;\n            return __assign(__assign({}, state), { members: __assign({}, channel.state.members), messages: __spreadArray([], channel.state.messages), pinnedMessages: __spreadArray([], channel.state.pinnedMessages), read: __assign({}, channel.state.read), watcherCount: channel.state.watcher_count, watchers: __assign({}, channel.state.watchers) });\n        }\n        case 'initStateFromChannel': {\n            var channel = action.channel;\n            return __assign(__assign({}, state), { loading: false, members: __assign({}, channel.state.members), messages: __spreadArray([], channel.state.messages), pinnedMessages: __spreadArray([], channel.state.pinnedMessages), read: __assign({}, channel.state.read), watcherCount: channel.state.watcher_count, watchers: __assign({}, channel.state.watchers) });\n        }\n        case 'loadMoreFinished': {\n            var hasMore = action.hasMore, messages = action.messages;\n            return __assign(__assign({}, state), { hasMore: hasMore, loadingMore: false, messages: messages });\n        }\n        case 'loadMoreThreadFinished': {\n            var threadHasMore = action.threadHasMore, threadMessages = action.threadMessages;\n            return __assign(__assign({}, state), { threadHasMore: threadHasMore, threadLoadingMore: false, threadMessages: threadMessages });\n        }\n        case 'openThread': {\n            var channel = action.channel, message = action.message;\n            return __assign(__assign({}, state), { thread: message, threadMessages: message.id ? __assign({}, channel.state.threads)[message.id] || [] : [] });\n        }\n        case 'setError': {\n            var error = action.error;\n            return __assign(__assign({}, state), { error: error });\n        }\n        case 'setLoadingMore': {\n            var loadingMore = action.loadingMore;\n            return __assign(__assign({}, state), { loadingMore: loadingMore });\n        }\n        case 'setThread': {\n            var message = action.message;\n            return __assign(__assign({}, state), { thread: message });\n        }\n        case 'setTyping': {\n            var channel = action.channel;\n            return __assign(__assign({}, state), { typing: __assign({}, channel.state.typing) });\n        }\n        case 'startLoadingThread': {\n            return __assign(__assign({}, state), { threadLoadingMore: true });\n        }\n        case 'updateThreadOnEvent': {\n            var channel = action.channel, message = action.message;\n            if (!state.thread)\n                return state;\n            return __assign(__assign({}, state), { thread: (message === null || message === void 0 ? void 0 : message.id) === state.thread.id ? channel.state.formatMessage(message) : state.thread, threadMessages: ((_a = state.thread) === null || _a === void 0 ? void 0 : _a.id) ? __assign({}, channel.state.threads)[state.thread.id] || [] : [] });\n        }\n        default:\n            return state;\n    }\n};\nexport var initialState = {\n    error: null,\n    hasMore: true,\n    loading: true,\n    loadingMore: false,\n    members: {},\n    messages: [],\n    pinnedMessages: [],\n    read: {},\n    thread: null,\n    threadHasMore: true,\n    threadLoadingMore: false,\n    threadMessages: [],\n    typing: {},\n    watcherCount: 0,\n    watchers: {},\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}