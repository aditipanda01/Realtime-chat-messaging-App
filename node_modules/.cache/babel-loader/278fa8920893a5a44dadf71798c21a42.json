{"ast":null,"code":"/* eslint-disable no-continue */\nimport { isDate } from '../../context/TranslationContext';\nexport var processMessages = function (params) {\n  var _a, _b, _c;\n  var disableDateSeparator = params.disableDateSeparator,\n    hideDeletedMessages = params.hideDeletedMessages,\n    hideNewMessageSeparator = params.hideNewMessageSeparator,\n    lastRead = params.lastRead,\n    messages = params.messages,\n    separateGiphyPreview = params.separateGiphyPreview,\n    setGiphyPreviewMessage = params.setGiphyPreviewMessage,\n    threadList = params.threadList,\n    userId = params.userId;\n  var unread = false;\n  var ephemeralMessagePresent = false;\n  var lastDateSeparator;\n  var newMessages = [];\n  for (var i = 0; i < messages.length; i += 1) {\n    var message = messages[i];\n    if (hideDeletedMessages && message.type === 'deleted') {\n      continue;\n    }\n    if (separateGiphyPreview && setGiphyPreviewMessage && message.type === 'ephemeral' && message.command === 'giphy') {\n      ephemeralMessagePresent = true;\n      setGiphyPreviewMessage(message);\n      continue;\n    }\n    var messageDate = message.created_at && isDate(message.created_at) && message.created_at.toDateString() || '';\n    var prevMessageDate = messageDate;\n    var previousMessage = messages[i - 1];\n    if (i > 0 && !disableDateSeparator && !threadList && previousMessage.created_at && isDate(previousMessage.created_at)) {\n      prevMessageDate = previousMessage.created_at.toDateString();\n    }\n    if (!unread && !hideNewMessageSeparator && !threadList) {\n      unread = lastRead && message.created_at && new Date(lastRead) < message.created_at || false;\n      // do not show date separator for current user's messages\n      if (!disableDateSeparator && unread && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) !== userId) {\n        newMessages.push({\n          customType: 'message.date',\n          date: message.created_at,\n          id: message.id,\n          unread: unread\n        });\n      }\n    }\n    if (!disableDateSeparator && !threadList && (i === 0 || messageDate !== prevMessageDate || hideDeletedMessages && ((_b = messages[i - 1]) === null || _b === void 0 ? void 0 : _b.type) === 'deleted' && lastDateSeparator !== messageDate) && ((_c = newMessages === null || newMessages === void 0 ? void 0 : newMessages[newMessages.length - 1]) === null || _c === void 0 ? void 0 : _c.customType) !== 'message.date' // do not show two date separators in a row\n    ) {\n      lastDateSeparator = messageDate;\n      newMessages.push({\n        customType: 'message.date',\n        date: message.created_at,\n        id: message.id\n      }, message);\n    } else {\n      newMessages.push(message);\n    }\n  }\n  // clean up the giphy preview component state after a Cancel action\n  if (separateGiphyPreview && !ephemeralMessagePresent) {\n    setGiphyPreviewMessage === null || setGiphyPreviewMessage === void 0 ? void 0 : setGiphyPreviewMessage(undefined);\n  }\n  return newMessages;\n};\n// fast since it usually iterates just the last few messages\nexport var getLastReceived = function (messages) {\n  for (var i = messages.length - 1; i > 0; i -= 1) {\n    if (messages[i].status === 'received') {\n      return messages[i].id;\n    }\n  }\n  return null;\n};\nexport var getReadStates = function (messages, read, returnAllReadData) {\n  if (read === void 0) {\n    read = {};\n  }\n  // create object with empty array for each message id\n  var readData = {};\n  Object.values(read).forEach(function (readState) {\n    if (!readState.last_read) return;\n    var userLastReadMsgId;\n    // loop messages sent by current user and add read data for other users in channel\n    messages.forEach(function (msg) {\n      if (msg.updated_at && msg.updated_at < readState.last_read) {\n        userLastReadMsgId = msg.id;\n        // if true, save other user's read data for all messages they've read\n        if (returnAllReadData) {\n          if (!readData[userLastReadMsgId]) {\n            readData[userLastReadMsgId] = [];\n          }\n          readData[userLastReadMsgId].push(readState.user);\n        }\n      }\n    });\n    // if true, only save read data for other user's last read message\n    if (userLastReadMsgId && !returnAllReadData) {\n      if (!readData[userLastReadMsgId]) {\n        readData[userLastReadMsgId] = [];\n      }\n      readData[userLastReadMsgId].push(readState.user);\n    }\n  });\n  return readData;\n};\nexport var insertIntro = function (messages, headerPosition) {\n  var newMessages = messages;\n  var intro = {\n    customType: 'channel.intro'\n  };\n  // if no headerPosition is set, HeaderComponent will go at the top\n  if (!headerPosition) {\n    newMessages.unshift(intro);\n    return newMessages;\n  }\n  // if no messages, intro gets inserted\n  if (!newMessages.length) {\n    newMessages.unshift(intro);\n    return newMessages;\n  }\n  // else loop over the messages\n  for (var i = 0; i < messages.length; i += 1) {\n    var message = messages[i];\n    var messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;\n    var nextMessage = messages[i + 1];\n    var nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at) ? nextMessage.created_at.getTime() : null;\n    // header position is smaller than message time so comes after;\n    if (messageTime && messageTime < headerPosition) {\n      // if header position is also smaller than message time continue;\n      if (nextMessageTime && nextMessageTime < headerPosition) {\n        if (messages[i + 1] && messages[i + 1].customType === 'message.date') continue;\n        if (!nextMessageTime) {\n          newMessages.push(intro);\n          return newMessages;\n        }\n        continue;\n      } else {\n        newMessages.splice(i + 1, 0, intro);\n        return newMessages;\n      }\n    }\n  }\n  return newMessages;\n};\nexport var getGroupStyles = function (message, previousMessage, nextMessage, noGroupByUser) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  if (message.customType === 'message.date') return '';\n  if (message.customType === 'channel.intro') return '';\n  if (noGroupByUser || ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0) return 'single';\n  var isTopMessage = !previousMessage || previousMessage.customType === 'channel.intro' || previousMessage.customType === 'message.date' || previousMessage.type === 'system' || ((_b = previousMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) !== 0 || ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = previousMessage.user) === null || _d === void 0 ? void 0 : _d.id) || previousMessage.type === 'error' || previousMessage.deleted_at;\n  var isBottomMessage = !nextMessage || nextMessage.customType === 'message.date' || nextMessage.type === 'system' || nextMessage.customType === 'channel.intro' || ((_e = nextMessage.attachments) === null || _e === void 0 ? void 0 : _e.length) !== 0 || ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_g = nextMessage.user) === null || _g === void 0 ? void 0 : _g.id) || nextMessage.type === 'error' || nextMessage.deleted_at;\n  if (!isTopMessage && !isBottomMessage) {\n    if (message.deleted_at || message.type === 'error') return 'single';\n    return 'middle';\n  }\n  if (isBottomMessage) {\n    if (isTopMessage || message.deleted_at || message.type === 'error') return 'single';\n    return 'bottom';\n  }\n  if (isTopMessage) return 'top';\n  return '';\n};","map":{"version":3,"names":["isDate","processMessages","params","_a","_b","_c","disableDateSeparator","hideDeletedMessages","hideNewMessageSeparator","lastRead","messages","separateGiphyPreview","setGiphyPreviewMessage","threadList","userId","unread","ephemeralMessagePresent","lastDateSeparator","newMessages","i","length","message","type","command","messageDate","created_at","toDateString","prevMessageDate","previousMessage","Date","user","id","push","customType","date","undefined","getLastReceived","status","getReadStates","read","returnAllReadData","readData","Object","values","forEach","readState","last_read","userLastReadMsgId","msg","updated_at","insertIntro","headerPosition","intro","unshift","messageTime","getTime","nextMessage","nextMessageTime","splice","getGroupStyles","noGroupByUser","_d","_e","_f","_g","attachments","isTopMessage","deleted_at","isBottomMessage"],"sources":["C:/Users/HP/Desktop/project_medical_pager_chat-master/node_modules/stream-chat-react/dist/components/MessageList/utils.js"],"sourcesContent":["/* eslint-disable no-continue */\nimport { isDate } from '../../context/TranslationContext';\nexport var processMessages = function (params) {\n    var _a, _b, _c;\n    var disableDateSeparator = params.disableDateSeparator, hideDeletedMessages = params.hideDeletedMessages, hideNewMessageSeparator = params.hideNewMessageSeparator, lastRead = params.lastRead, messages = params.messages, separateGiphyPreview = params.separateGiphyPreview, setGiphyPreviewMessage = params.setGiphyPreviewMessage, threadList = params.threadList, userId = params.userId;\n    var unread = false;\n    var ephemeralMessagePresent = false;\n    var lastDateSeparator;\n    var newMessages = [];\n    for (var i = 0; i < messages.length; i += 1) {\n        var message = messages[i];\n        if (hideDeletedMessages && message.type === 'deleted') {\n            continue;\n        }\n        if (separateGiphyPreview &&\n            setGiphyPreviewMessage &&\n            message.type === 'ephemeral' &&\n            message.command === 'giphy') {\n            ephemeralMessagePresent = true;\n            setGiphyPreviewMessage(message);\n            continue;\n        }\n        var messageDate = (message.created_at && isDate(message.created_at) && message.created_at.toDateString()) || '';\n        var prevMessageDate = messageDate;\n        var previousMessage = messages[i - 1];\n        if (i > 0 &&\n            !disableDateSeparator &&\n            !threadList &&\n            previousMessage.created_at &&\n            isDate(previousMessage.created_at)) {\n            prevMessageDate = previousMessage.created_at.toDateString();\n        }\n        if (!unread && !hideNewMessageSeparator && !threadList) {\n            unread = (lastRead && message.created_at && new Date(lastRead) < message.created_at) || false;\n            // do not show date separator for current user's messages\n            if (!disableDateSeparator && unread && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) !== userId) {\n                newMessages.push({\n                    customType: 'message.date',\n                    date: message.created_at,\n                    id: message.id,\n                    unread: unread,\n                });\n            }\n        }\n        if (!disableDateSeparator &&\n            !threadList &&\n            (i === 0 ||\n                messageDate !== prevMessageDate ||\n                (hideDeletedMessages &&\n                    ((_b = messages[i - 1]) === null || _b === void 0 ? void 0 : _b.type) === 'deleted' &&\n                    lastDateSeparator !== messageDate)) &&\n            ((_c = newMessages === null || newMessages === void 0 ? void 0 : newMessages[newMessages.length - 1]) === null || _c === void 0 ? void 0 : _c.customType) !== 'message.date' // do not show two date separators in a row\n        ) {\n            lastDateSeparator = messageDate;\n            newMessages.push({\n                customType: 'message.date',\n                date: message.created_at,\n                id: message.id,\n            }, message);\n        }\n        else {\n            newMessages.push(message);\n        }\n    }\n    // clean up the giphy preview component state after a Cancel action\n    if (separateGiphyPreview && !ephemeralMessagePresent) {\n        setGiphyPreviewMessage === null || setGiphyPreviewMessage === void 0 ? void 0 : setGiphyPreviewMessage(undefined);\n    }\n    return newMessages;\n};\n// fast since it usually iterates just the last few messages\nexport var getLastReceived = function (messages) {\n    for (var i = messages.length - 1; i > 0; i -= 1) {\n        if (messages[i].status === 'received') {\n            return messages[i].id;\n        }\n    }\n    return null;\n};\nexport var getReadStates = function (messages, read, returnAllReadData) {\n    if (read === void 0) { read = {}; }\n    // create object with empty array for each message id\n    var readData = {};\n    Object.values(read).forEach(function (readState) {\n        if (!readState.last_read)\n            return;\n        var userLastReadMsgId;\n        // loop messages sent by current user and add read data for other users in channel\n        messages.forEach(function (msg) {\n            if (msg.updated_at && msg.updated_at < readState.last_read) {\n                userLastReadMsgId = msg.id;\n                // if true, save other user's read data for all messages they've read\n                if (returnAllReadData) {\n                    if (!readData[userLastReadMsgId]) {\n                        readData[userLastReadMsgId] = [];\n                    }\n                    readData[userLastReadMsgId].push(readState.user);\n                }\n            }\n        });\n        // if true, only save read data for other user's last read message\n        if (userLastReadMsgId && !returnAllReadData) {\n            if (!readData[userLastReadMsgId]) {\n                readData[userLastReadMsgId] = [];\n            }\n            readData[userLastReadMsgId].push(readState.user);\n        }\n    });\n    return readData;\n};\nexport var insertIntro = function (messages, headerPosition) {\n    var newMessages = messages;\n    var intro = { customType: 'channel.intro' };\n    // if no headerPosition is set, HeaderComponent will go at the top\n    if (!headerPosition) {\n        newMessages.unshift(intro);\n        return newMessages;\n    }\n    // if no messages, intro gets inserted\n    if (!newMessages.length) {\n        newMessages.unshift(intro);\n        return newMessages;\n    }\n    // else loop over the messages\n    for (var i = 0; i < messages.length; i += 1) {\n        var message = messages[i];\n        var messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;\n        var nextMessage = messages[i + 1];\n        var nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at)\n            ? nextMessage.created_at.getTime()\n            : null;\n        // header position is smaller than message time so comes after;\n        if (messageTime && messageTime < headerPosition) {\n            // if header position is also smaller than message time continue;\n            if (nextMessageTime && nextMessageTime < headerPosition) {\n                if (messages[i + 1] && messages[i + 1].customType === 'message.date')\n                    continue;\n                if (!nextMessageTime) {\n                    newMessages.push(intro);\n                    return newMessages;\n                }\n                continue;\n            }\n            else {\n                newMessages.splice(i + 1, 0, intro);\n                return newMessages;\n            }\n        }\n    }\n    return newMessages;\n};\nexport var getGroupStyles = function (message, previousMessage, nextMessage, noGroupByUser) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (message.customType === 'message.date')\n        return '';\n    if (message.customType === 'channel.intro')\n        return '';\n    if (noGroupByUser || ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0)\n        return 'single';\n    var isTopMessage = !previousMessage ||\n        previousMessage.customType === 'channel.intro' ||\n        previousMessage.customType === 'message.date' ||\n        previousMessage.type === 'system' ||\n        ((_b = previousMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) !== 0 ||\n        ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = previousMessage.user) === null || _d === void 0 ? void 0 : _d.id) ||\n        previousMessage.type === 'error' ||\n        previousMessage.deleted_at;\n    var isBottomMessage = !nextMessage ||\n        nextMessage.customType === 'message.date' ||\n        nextMessage.type === 'system' ||\n        nextMessage.customType === 'channel.intro' ||\n        ((_e = nextMessage.attachments) === null || _e === void 0 ? void 0 : _e.length) !== 0 ||\n        ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_g = nextMessage.user) === null || _g === void 0 ? void 0 : _g.id) ||\n        nextMessage.type === 'error' ||\n        nextMessage.deleted_at;\n    if (!isTopMessage && !isBottomMessage) {\n        if (message.deleted_at || message.type === 'error')\n            return 'single';\n        return 'middle';\n    }\n    if (isBottomMessage) {\n        if (isTopMessage || message.deleted_at || message.type === 'error')\n            return 'single';\n        return 'bottom';\n    }\n    if (isTopMessage)\n        return 'top';\n    return '';\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}