{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { isDate, isDayOrMoment, isNumberOrString, useTranslationContext } from '../../context/TranslationContext';\nexport var defaultTimestampFormat = 'h:mmA';\nexport var notValidDateWarning = 'MessageTimestamp was called without a message, or message has invalid created_at date.';\nexport var noParsingFunctionWarning = 'MessageTimestamp was called but there is no datetime parsing function available';\nfunction getDateString(messageCreatedAt, formatDate, calendar, tDateTimeParser, format) {\n  if (!messageCreatedAt || !Date.parse(messageCreatedAt)) {\n    console.warn(notValidDateWarning);\n    return null;\n  }\n  if (typeof formatDate === 'function') {\n    return formatDate(new Date(messageCreatedAt));\n  }\n  if (!tDateTimeParser) {\n    console.warn(noParsingFunctionWarning);\n    return null;\n  }\n  var parsedTime = tDateTimeParser(messageCreatedAt);\n  if (isDayOrMoment(parsedTime)) {\n    /**\n     * parsedTime.calendar is guaranteed on the type but is only\n     * available when a user calls dayjs.extend(calendar)\n     */\n    return calendar && parsedTime.calendar ? parsedTime.calendar() : parsedTime.format(format);\n  }\n  if (isDate(parsedTime)) {\n    return parsedTime.toDateString();\n  }\n  if (isNumberOrString(parsedTime)) {\n    return parsedTime;\n  }\n  return null;\n}\nvar UnMemoizedMessageTimestamp = function (props) {\n  var _a = props.calendar,\n    calendar = _a === void 0 ? false : _a,\n    _b = props.customClass,\n    customClass = _b === void 0 ? '' : _b,\n    _c = props.format,\n    format = _c === void 0 ? defaultTimestampFormat : _c,\n    propMessage = props.message;\n  var _d = useMessageContext('MessageTimestamp'),\n    formatDate = _d.formatDate,\n    contextMessage = _d.message;\n  var tDateTimeParser = useTranslationContext('MessageTimestamp').tDateTimeParser;\n  var message = propMessage || contextMessage;\n  var createdAt = message.created_at;\n  var when = useMemo(function () {\n    return getDateString(createdAt, formatDate, calendar, tDateTimeParser, format);\n  }, [formatDate, calendar, tDateTimeParser, format, createdAt]);\n  if (!when) return null;\n  return React.createElement(\"time\", {\n    className: customClass,\n    dateTime: createdAt,\n    title: createdAt\n  }, when);\n};\nexport var MessageTimestamp = React.memo(UnMemoizedMessageTimestamp);","map":{"version":3,"names":["React","useMemo","useMessageContext","isDate","isDayOrMoment","isNumberOrString","useTranslationContext","defaultTimestampFormat","notValidDateWarning","noParsingFunctionWarning","getDateString","messageCreatedAt","formatDate","calendar","tDateTimeParser","format","Date","parse","console","warn","parsedTime","toDateString","UnMemoizedMessageTimestamp","props","_a","_b","customClass","_c","propMessage","message","_d","contextMessage","createdAt","created_at","when","createElement","className","dateTime","title","MessageTimestamp","memo"],"sources":["C:/Users/HP/Desktop/project_medical_pager_chat-master/node_modules/stream-chat-react/dist/components/Message/MessageTimestamp.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { isDate, isDayOrMoment, isNumberOrString, useTranslationContext, } from '../../context/TranslationContext';\nexport var defaultTimestampFormat = 'h:mmA';\nexport var notValidDateWarning = 'MessageTimestamp was called without a message, or message has invalid created_at date.';\nexport var noParsingFunctionWarning = 'MessageTimestamp was called but there is no datetime parsing function available';\nfunction getDateString(messageCreatedAt, formatDate, calendar, tDateTimeParser, format) {\n    if (!messageCreatedAt || !Date.parse(messageCreatedAt)) {\n        console.warn(notValidDateWarning);\n        return null;\n    }\n    if (typeof formatDate === 'function') {\n        return formatDate(new Date(messageCreatedAt));\n    }\n    if (!tDateTimeParser) {\n        console.warn(noParsingFunctionWarning);\n        return null;\n    }\n    var parsedTime = tDateTimeParser(messageCreatedAt);\n    if (isDayOrMoment(parsedTime)) {\n        /**\n         * parsedTime.calendar is guaranteed on the type but is only\n         * available when a user calls dayjs.extend(calendar)\n         */\n        return calendar && parsedTime.calendar ? parsedTime.calendar() : parsedTime.format(format);\n    }\n    if (isDate(parsedTime)) {\n        return parsedTime.toDateString();\n    }\n    if (isNumberOrString(parsedTime)) {\n        return parsedTime;\n    }\n    return null;\n}\nvar UnMemoizedMessageTimestamp = function (props) {\n    var _a = props.calendar, calendar = _a === void 0 ? false : _a, _b = props.customClass, customClass = _b === void 0 ? '' : _b, _c = props.format, format = _c === void 0 ? defaultTimestampFormat : _c, propMessage = props.message;\n    var _d = useMessageContext('MessageTimestamp'), formatDate = _d.formatDate, contextMessage = _d.message;\n    var tDateTimeParser = useTranslationContext('MessageTimestamp').tDateTimeParser;\n    var message = propMessage || contextMessage;\n    var createdAt = message.created_at;\n    var when = useMemo(function () { return getDateString(createdAt, formatDate, calendar, tDateTimeParser, format); }, [formatDate, calendar, tDateTimeParser, format, createdAt]);\n    if (!when)\n        return null;\n    return (React.createElement(\"time\", { className: customClass, dateTime: createdAt, title: createdAt }, when));\n};\nexport var MessageTimestamp = React.memo(UnMemoizedMessageTimestamp);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}